<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_chicken_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
var key_right;
var key_left;
var key_jump;
var key_jump_held;
var key_pickup;
var key_pickup_held;
var key_up;
var key_down;
var key_escape;
var key_selectl;
var key_selectr;

mute = false;


if(file_exists("Save.sav")) {
    
    ini_open("Save.sav") 
    if(ini_section_exists("Unlockables")) {
        locked[0] =  ini_read_string("Unlockables", "Chicken0", "0");  
        locked[1] =  ini_read_string("Unlockables", "Chicken1", "0");  
        locked[2] =  ini_read_string("Unlockables", "Chicken2", "0"); 
        locked[3] =  ini_read_string("Unlockables", "Chicken3", "1");  
        locked[4] =  ini_read_string("Unlockables", "Chicken4", "1");  
        locked[5] =  ini_read_string("Unlockables", "Chicken5", "1");  
        locked[6] =  ini_read_string("Unlockables", "Chicken6", "1");  
        locked[7] =  ini_read_string("Unlockables", "Chicken7", "1");  
        locked[8] =  ini_read_string("Unlockables", "Chicken8", "1");  
        locked[9] =  ini_read_string("Unlockables", "Chicken9", "1");  
        locked[10] = ini_read_string("Unlockables", "Chicken10", "1"); 
        locked[11] = ini_read_string("Unlockables", "Chicken11", "1"); 
        locked[12] = ini_read_string("Unlockables", "Chicken12", "1"); 
        locked[13] = ini_read_string("Unlockables", "Chicken13", "1"); 
        locked[14] = ini_read_string("Unlockables", "Chicken14", "1"); 
        }
    for(var i = 0; i &lt; array_length_1d(locked); i++) {
        locked[i] = real(base64_decode(string(locked[i])));
    }
    ini_close(); 
}


globalvar speedRun;
speedRun = false;

grav = .2;
hsp = 0;
vsp = 0;
globalvar frames;
frames = 30 / room_speed;

jumpspeed = 7.5;
movespeed = 4;
dir = 0;
image_speed = (.25 + (hsp * .05)) * frames;
jump = false;
global.playerDead = false;
state = states.cs_sleep;
heldItem = noone;

slide = .15;
friction = .75;
crateSpd = 0;

child = -1;
save = false;



globalvar comboShake;
comboShake = 0;
death = 0;

//Health and hurt variables
hp = 100;
hit = false;
counter = 0;

respawn = false;
flap = false;

//Stereo Audio Setup
audio_listener_orientation(0, 1, 0, 0, 0, 1);

//Sprite Select
idleSpr = spr_chicken_idle;
moveSpr = spr_chicken_run;
jumpSpr = spr_chicken_jump;
fallSpr = spr_chicken_fall;
floatSpr = spr_chicken_float;
deathSpr = spr_chicken_death;
death2Spr = spr_chicken_death2;
sleepSpr = spr_chicken_sleep;

cutJump = 0;

nearcrate = false;

/**if(os_type == os_ios) {
var gap;
var button_width;
var button_height;

gap = 40;
button_width = 150;
button_height = 350;

    key_jump = virtual_key_add(display_get_gui_width() /2 , display_get_gui_height() /2, view_wview[0], view_hview[0], vk_space);  
    key_jump_held = virtual_key_add(display_get_gui_width() /2 , display_get_gui_height() /2, view_wview[0], view_hview[0], vk_space); 
    //key_restart = virtual_key_add(0,0, display_get_gui_width(), display_get_gui_height() / 2, ord('R')); 
    //key_pickup = virtual_key_add(0,0, display_get_gui_width(), display_get_gui_height() / 2, vk_enter); 
    key_left = virtual_key_add(gap, display_get_gui_height() -(gap + button_height), button_width, button_height, vk_left);
    key_right = virtual_key_add((gap * 2) + button_width, display_get_gui_height() -(gap + button_height), button_width, button_height, vk_right); 
    virtual_key_show(key_left);
    virtual_key_show(key_right);
}
**/
control = 0;


//Ad for iOS





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(GoogleMobileAds_InterstitialStatus() == "Ready") {
    GoogleMobileAds_ShowInterstitial();    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = states.jump;
hit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_listener_position(x, y, 0);

switch( state ) {
    case states.idle:
        scr_chickenIdle_state();
        break;
    case states.move:
        scr_chickenMove_state();
        break;
    case states.jump:
        scr_chickenJump_state();
        break;
    case states.climb:
        scr_chickenClimb_state();
        break;
    case states.push:
        scr_chickenPush_state();
        break;
    case states.cs_move:
        scr_chicken_csMove_state();
        break;
    case states.cs_idle:
        scr_chicken_csIdle_state();
        break;
    case states.cs_jump:
        scr_chicken_csJump_state();
        break;
    case states.cs_sleep:
        scr_chicken_csSleep_state();
        break;
}    

if(distance_to_object(obj_crate01) &lt; 2) {
    nearcrate = true;
}
else nearcrate = false;

counter ++;

if(keyboard_check_pressed(ord('M'))) {
    
     if(!mute) {    
        
        mute = true;
     }
     else {
        mute = false;
     }
}

if(mute) audio_pause_all();
else audio_resume_all();


scr_chickenDeath();












        



 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_end">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(obj_timer)) {
      if(obj_timer.count_up == true) {      
        obj_timer.count_up = false;
      
        global.seconds = obj_timer.seconds;
        global.minutes = obj_timer.minutes;
        global.hours = obj_timer.hours;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = obj_controller.x;
y = obj_controller.y;
if(save &amp;&amp; !instance_exists(obj_Chicken2) &amp;&amp; !speedRun) {
    if (file_exists("Save.sav")) 
    ini_open("Save.sav");
    ini_section_delete("Save1"); 
    if(instance_exists(obj_timer)) {
        global.seconds = obj_timer.seconds;
        global.minutes = obj_timer.minutes;
        global.hours = obj_timer.hours;
        ini_write_real("Save1", "seconds", global.seconds);
        ini_write_real("Save1", "minutes", global.minutes);
        ini_write_real("Save1", "hours", global.hours);
        ini_write_real("Save1", "timer", true);   
    }
    else ini_write_real("Save1", "timer", false); 
    var SavedRoom = room;
    ini_write_real("Save1", "room", SavedRoom);
    var egg;
    //var egg_color;
    //egg_color = -1;
    if(instance_exists(obj_eggFollow)) {
        egg = true;
    }
    else {
        egg = false;
        //egg_color = spr_findEgg;
    }
    ini_write_real("Save1", "egg", egg);
    ini_close();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(!file_exists("Save.sav")) {
    locked[0] = false;
    locked[1] = false;
    locked[2] = false;
    locked[3] = 1;
    locked[4] = 1;
    locked[5] = 1;
    locked[6] = 1;
    locked[7] = 1;
    locked[8] = 1;
    locked[9] = 1;
    locked[10] = 1;
    locked[11] = 1;
    locked[12] = 1;
    locked[13] = 1;
    locked[14] = 1;
    
}
var unlocked;

 
    
    for(var i = 0; i &lt; array_length_1d(locked); i++) {
        unlocked[i] = base64_encode(string(locked[i]));
    } 
    
    ini_open("Save.sav");    
            if(!ini_section_exists("Unlockables")) {                
                ini_write_string("Unlockables", "Chicken0", unlocked[0]);
                ini_write_string("Unlockables", "Chicken1", unlocked[1]);
                ini_write_string("Unlockables", "Chicken2", unlocked[2]);
                ini_write_string("Unlockables", "Chicken3", unlocked[3]);
                ini_write_string("Unlockables", "Chicken4", unlocked[4]);
                ini_write_string("Unlockables", "Chicken5", unlocked[5]);
                ini_write_string("Unlockables", "Chicken6", unlocked[6]);
                ini_write_string("Unlockables", "Chicken7", unlocked[7]);
                ini_write_string("Unlockables", "Chicken8", unlocked[8]);
                ini_write_string("Unlockables", "Chicken9", unlocked[9]);
                ini_write_string("Unlockables", "Chicken10", unlocked[10]);
                ini_write_string("Unlockables", "Chicken11", unlocked[11]); 
                ini_write_string("Unlockables", "Chicken12", unlocked[12]);   
                ini_write_string("Unlockables", "Chicken11", unlocked[13]); 
                ini_write_string("Unlockables", "Chicken12", unlocked[14]);                
        }
    ini_close();  
        

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(os_type == os_ios) {
var gap;
var button_width;
var button_height;

gap = 40;
button_width = 150;
button_height = 350;

    key_jump = virtual_key_add(display_get_gui_width() /2 , display_get_gui_height() /2, view_wview[0], view_hview[0], vk_space);  
    key_jump_held = virtual_key_add(display_get_gui_width() /2 , display_get_gui_height() /2, view_wview[0], view_hview[0], vk_space); 
    //key_restart = virtual_key_add(0,0, display_get_gui_width(), display_get_gui_height() / 2, ord('R')); 
    //key_pickup = virtual_key_add(0,0, display_get_gui_width(), display_get_gui_height() / 2, vk_enter); 
    key_left = virtual_key_add(gap, display_get_gui_height() -(gap + button_height), button_width, button_height, vk_left);
    key_right = virtual_key_add((gap * 2) + button_width, display_get_gui_height() -(gap + button_height), button_width, button_height, vk_right); 
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hit) {
    if counter mod 3 = 0 {
        draw_self();
    }
    else {
        draw_sprite_ext(moveSpr, 0, x, y, 1, 1, 0, c_white, 0);
    }
}
else {
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
